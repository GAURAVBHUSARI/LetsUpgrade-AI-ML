{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter first complex number: 3+2j\n",
      "Enter first complex number: 5+2j\n",
      "SUM =  (8+4j)\n"
     ]
    }
   ],
   "source": [
    "#Write a program to subtract two complex numbers in Python\n",
    "first = complex(input('Enter first complex number: '))\n",
    "second = complex(input('Enter first complex number: '))\n",
    "addition = first + second\n",
    "print('SUM = ', addition)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter 1st Number: 5\n",
      "Enter 2nd Number: 9\n",
      "Value of num1 after swapping:  9\n",
      "Value of num2 after swapping:  5\n"
     ]
    }
   ],
   "source": [
    "#Write a program to swap two numbers in Python with the help of a temporary variable\n",
    "num1 = input('Enter 1st Number: ')\n",
    "num2 = input('Enter 2nd Number: ')\n",
    "temp = num1\n",
    "num1 = num2\n",
    "num2 = temp\n",
    "print(\"Value of num1 after swapping: \", num1)\n",
    "print(\"Value of num2 after swapping: \", num2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter 1st Number: 5\n",
      "Enter 2nd Number: 9\n",
      "Value of num1 after swapping:  9\n",
      "Value of num2 after swapping:  5\n"
     ]
    }
   ],
   "source": [
    "#Write a program to swap two numbers in Python without using a temporary variable\n",
    "num1 = input('Enter 1st Number: ')\n",
    "num2 = input('Enter 2nd Number: ')\n",
    "num1, num2 = num2, num1\n",
    "print(\"Value of num1 after swapping: \", num1)\n",
    "print(\"Value of num2 after swapping: \", num2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Insert a value in Fahrenheit50\n",
      "Insert a value in Fahrenheit50\n",
      "10C\n",
      "283K\n"
     ]
    }
   ],
   "source": [
    "#Write a program to convert Fahrenheit to kelvin and celsius both\n",
    "x = int(input(\"Insert a value in Fahrenheit\"))\n",
    "y = int(input(\"Insert a value in Fahrenheit\"))\n",
    "x=round((x-32)*(5/9))\n",
    "y=round((y-32)*(5/9)+(273))\n",
    "print(str(x)+'C')\n",
    "print(str(y)+'K')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n",
      "<class 'int'>\n",
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "#Write a program to demonstrate all the available data types in Python. Hint: Use type() function\n",
    "Var1=\"Hello World\"\n",
    "Var2=4\n",
    "Var3=36.7\n",
    "print(type(Var1))\n",
    "print(type(Var2))\n",
    "print(type(Var3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a number: 81\n",
      "square root: 3.0\n"
     ]
    }
   ],
   "source": [
    "#Write a program to find the fourth root of a number\n",
    "number = int(input(\"enter a number: \"))\n",
    "sqrt = number ** 0.25\n",
    "print(\"square root:\", sqrt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
